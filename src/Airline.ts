import {CardinalDirection} from "./navigation/CardinalDirection.js";

/**
 * Represents an airline entry that defines the type of traffic generated as arrivals or departures at an airport.
 */
export class Airline {
    /**
     * The airline's 3-letter callsign or private registration identifier.
     *
     * Examples:
     * - `BAW` — Airline callsign for British Airways.
     * - `D-ABCD` — German private registration (starts with ‘D’ followed by four letters, e.g. ‘DLHNS’).
     * - `N-123AB` — US private registration (starts with ‘N’ followed by three letters and two numbers, e.g. ‘N426BD’).
     * - `RAIDR42-` — Military registration (exactly ‘RAIDR42’, no variations).
     * - `DLH2404-` — Airline callsign (Lufthansa, exactly ‘DLH2404’, no variations).
     */
    public readonly callsign: string;

    /**
     * @param callsign The airline callsign or private registration code; see {@link Airline#callsign}.
     * @param frequency A relative weighted frequency score indicating how often this airline appears.
     *   For example:
     *   - 0 means never,
     *   - 0.1 means rarely,
     *   - 1 means occasionally,
     *   - 10 means frequently.
     * @param types A set of aircraft ICAO type designators (e.g., ‘A21N’, ‘BCS1’, ‘B789’).
     *   Aircraft types are chosen with equal probability.
     * @param direction The preferred directions for arrivals and departures.
     *   This can be a set containing any combination of:
     *   - Very rough cardinal directions,
     *   - Or precise headings in degrees from true north (numbers).
     *
     *   Numeric headings allow precision within ±20°. For example, 270° implies arrivals from and departures towards
     *     the west. Ensure suitable entry points and SIDs (or {@link Departure Departures}) are available in these directions.
     * @param [pronunciation] Optional pronunciation guide for the callsign.
     *   If omitted for private registrations, a shortened phonetic pronunciation will be automatically generated by
     *     the system.
     */
    public constructor(
        callsign: string,
        public readonly frequency: number,
        public readonly types: Set<string>,
        public readonly direction: Set<CardinalDirection | number>,
        public readonly pronunciation?: string,
    ) {
        this.callsign = callsign;
        this.types = new Set(Array.from(types).map((t) => t.toUpperCase()));
    }
}
